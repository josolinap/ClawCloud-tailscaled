name: Security Scan and Deploy

# -----------------------------------------------------------------
# Triggers
# -----------------------------------------------------------------
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Every Sunday at 02:00‚ÄØUTC
    - cron: '0 2 * * 0'

# -----------------------------------------------------------------
# Global environment variables
# -----------------------------------------------------------------
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/tailscale-exit-node

# -----------------------------------------------------------------
# Permissions (minimum required)
# -----------------------------------------------------------------
permissions:
  contents: read                # checkout
  packages: write               # ghcr.io push
  security-events: write       # upload SARIF results
  id-token: write               # (optional) for OIDC if you ever need it
  actions: read                 # required for some internal steps

# -----------------------------------------------------------------
# Jobs
# -----------------------------------------------------------------
jobs:
  # -----------------------------------------------------------------
  # 1Ô∏è‚É£  Security scanning
  # -----------------------------------------------------------------
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ---------- Hadolint ----------
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile.prod
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload Hadolint results to the Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: hadolint-results.sarif

      # ---------- Build a temporary image for Trivy ----------
      - name: Build test image (for Trivy)
        run: |
          docker build -f Dockerfile.prod -t test-image:${{ github.sha }} .

      # ---------- Trivy ----------
      - name: Run Trivy vulnerability scan
        # NOTE: The action tag `v0.44.0` **exists**.  We also pin the Trivy CLI
        # version to 0.45.x (the latest at time of writing) via the
        # `trivy-version` input.  This gives us the newest scanner while
        # keeping the action itself stable.
        uses: aquasecurity/trivy-action@v0.44.0
        with:
          image-ref: test-image:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif
          ignore-unfixed: true               # optional ‚Äì remove if you want all findings
          trivy-version: "0.45.0"            # use the latest Trivy CLI (independent of the action tag)

      - name: Upload Trivy results to the Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-results.sarif

      # ---------- Custom script ----------
      - name: Run custom security scan script
        run: |
          chmod +x security-scan.sh
          ./security-scan.sh

      - name: Upload custom security‚Äëscan report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: security-report-*.txt

  # -----------------------------------------------------------------
  # 2Ô∏è‚É£  Build & test the production image
  # -----------------------------------------------------------------
  build-and-test:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract image metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test container startup (smoke test)
        env:
          IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        run: |
          # Run container in detached mode with a dummy auth key
          docker run -d --rm --name test-container \
            -e TAILSCALE_AUTHKEY=tskey-auth-test-key \
            "$IMAGE"

          # Give it a few seconds to initialise
          sleep 30

          echo "=== Container logs ==="
          docker logs test-container || true

          # Clean up
          docker stop test-container || true

  # -----------------------------------------------------------------
  # 3Ô∏è‚É£  Deploy to Staging (only on develop pushes)
  # -----------------------------------------------------------------
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test]
    if: ${{ github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to the staging environment"
          # ---- Add your real staging deployment commands here ----
          # Example:
          # ./deploy.sh --environment staging

  # -----------------------------------------------------------------
  # 4Ô∏è‚É£  Deploy to Production (only on main pushes)
  # -----------------------------------------------------------------
  deploy-production:
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test]
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        env:
          TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}
          HOSTNAME: ${{ vars.HOSTNAME }}
        run: |
          echo "üöÄ Deploying to the production environment"

          # Validate the auth‚Äëkey format
          if [[ ! "$TAILSCALE_AUTHKEY" =~ ^tskey-auth-[a-zA-Z0-9_-]+$ ]]; then
            echo "‚ùå Invalid TAILSCALE_AUTHKEY format"
            exit 1
          fi

          chmod +x deploy.sh
          ./deploy.sh

      - name: Health check
        if: always()
        run: |
          echo "üîé Running health‚Äëcheck against the newly deployed service"
          sleep 60
          HEALTH_URL="http://localhost/health"
          if ! curl -fsSL "$HEALTH_URL"; then
            echo "‚ùå Health check failed"
            ./deploy.sh --logs || true
            exit 1
          fi
          echo "‚úÖ Health check passed ‚Äì deployment successful!"

      - name: Notify deployment (Slack / Discord / Email ‚Ä¶)
        if: always()
        run: |
          echo "üì£ Production deployment completed"
          # Example (Slack webhook):
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"‚úÖ Production deployment succeeded"}' ${{ secrets.SLACK_WEBHOOK }}

  # -----------------------------------------------------------------
  # 5Ô∏è‚É£  Cleanup (runs regardless of the outcome of previous jobs)
  # -----------------------------------------------------------------
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Cleanup old images from GHCR
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE: ${{ env.IMAGE_NAME }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üßπ Starting cleanup of old container images"

          # Keep the 10 most recent images, delete the rest.
          gh auth login --with-token <<<"$GHCR_TOKEN"
          IMAGES=$(gh api \
            -H "Accept: application/vnd.github+json" \
            "/orgs/${{ github.repository_owner }}/packages/container/${IMAGE}/versions?per_page=100" \
            | jq -r '.[] | select(.metadata.container.tags != null) | .id' | sort -r)

          KEEP=$(echo "$IMAGES" | head -n 10)
          DELETE=$(comm -23 <(echo "$IMAGES") <(echo "$KEEP"))

          for id in $DELETE; do
            echo "Deleting image version $id"
            gh api \
              -X DELETE \
              "/orgs/${{ github.repository_owner }}/packages/container/${IMAGE}/versions/$id"
          done

          echo "üßπ Cleanup finished"
