name: Security Scan and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 0'   # Every Sunday at 02:00 UTC

env:
  # Registries
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DH: docker.io

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write
  actions: read

jobs:
  # -----------------------------------------------------------------
  # 1Ô∏è‚É£ Security scanning
  # -----------------------------------------------------------------
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Hadolint
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile.prod
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif

      # Build test image for Trivy
      - name: Build test image (for Trivy)
        run: docker build -f Dockerfile.prod -t test-image:${{ github.sha }} .

      # Trivy
      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: test-image:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif
          ignore-unfixed: true

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      # Custom scan
      - name: Run custom security scan
        run: |
          chmod +x security-scan.sh
          ./security-scan.sh

      - name: Upload custom scan report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: security-report-*.txt

  # -----------------------------------------------------------------
  # 2Ô∏è‚É£ Build & test
  # -----------------------------------------------------------------
  build-and-test:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GHCR
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DH }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Metadata
      - name: Extract image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/tailscale-exit-node
            ${{ env.REGISTRY_DH }}/${{ secrets.DOCKER_USERNAME }}/tailscale-exit-node
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      # Build & Push
      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Smoke test container startup
        env:
          IMAGE: ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/tailscale-exit-node:${{ github.sha }}
        run: |
          docker run -d --rm --name test-container \
            -e TAILSCALE_AUTHKEY=tskey-auth-test-key \
            "$IMAGE"
          sleep 30
          echo "=== Container logs ==="
          docker logs test-container || true
          docker stop test-container || true

  # -----------------------------------------------------------------
  # 3Ô∏è‚É£ Deploy staging (develop branch)
  # -----------------------------------------------------------------
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test]
    if: ${{ github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - run: echo "üöÄ Deploying to staging"

  # -----------------------------------------------------------------
  # 4Ô∏è‚É£ Deploy production (main branch)
  # -----------------------------------------------------------------
  deploy-production:
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test]
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to production
        env:
          TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}
          HOSTNAME: ${{ vars.HOSTNAME }}
        run: |
          echo "üöÄ Deploying to production"
          chmod +x deploy.sh
          ./deploy.sh

  # -----------------------------------------------------------------
  # 5Ô∏è‚É£ Cleanup GHCR
  # -----------------------------------------------------------------
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Cleanup GHCR images
        env:
          REGISTRY: ${{ env.REGISTRY_GHCR }}
          IMAGE: ${{ github.repository }}/tailscale-exit-node
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üßπ Cleaning up old images"
          gh auth login --with-token <<<"$GHCR_TOKEN"
          IMAGES=$(gh api -H "Accept: application/vnd.github+json" \
            "/orgs/${{ github.repository_owner }}/packages/container/${IMAGE}/versions?per_page=100" \
            | jq -r '.[] | .id' | sort -r)
          KEEP=$(echo "$IMAGES" | head -n 10)
          DELETE=$(comm -23 <(echo "$IMAGES") <(echo "$KEEP"))
          for id in $DELETE; do
            gh api -X DELETE \
              "/orgs/${{ github.repository_owner }}/packages/container/${IMAGE}/versions/$id"
          done
