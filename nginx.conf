# Optimized nginx configuration for claw.cloud free tier (minimal resources)
# CPU: 0.1-0.5, RAM: 256-512MB constraints

user nginx;
worker_processes 1;
worker_rlimit_nofile 1024;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 512;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 15;
    keepalive_requests 100;
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;

    # Resource limits
    client_max_body_size 1m;
    client_body_buffer_size 1k;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 1k;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 2;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml;

    # Security headers for OWASP compliance
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline';" always;
    
    # Privacy headers
    add_header Privacy-Policy "no-user-data-logged" always;
    more_clear_headers Server;
    server_tokens off;

    # Rate limiting for DDoS protection
    limit_req_zone $binary_remote_addr zone=general:1m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=health:1m rate=60r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:1m;

    server {
        listen 80 default_server;
        server_name _;

        # Connection limits
        limit_req zone=general burst=20 nodelay;
        limit_conn conn_limit_per_ip 10;

        # Health check endpoint (high rate limit)
        location /health {
            limit_req zone=health burst=10 nodelay;
            access_log off;
            
            add_header Content-Type application/json;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            
            return 200 '{"status":"healthy","service":"tailscale-exit-node","timestamp":"$time_iso8601"}';
        }

        # Status endpoint with bandwidth info
        location /status {
            limit_req zone=health burst=5 nodelay;
            
            add_header Content-Type application/json;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            
            # Try to serve bandwidth status if available
            try_files /var/lib/tailscale/bandwidth/status.json @status_fallback;
        }

        location @status_fallback {
            add_header Content-Type application/json;
            return 200 '{"status":"running","service":"tailscale-exit-node","bandwidth_monitoring":"unavailable"}';
        }

        # Root endpoint
        location / {
            add_header Content-Type text/html;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            
            return 200 '<!DOCTYPE html>
<html>
<head><title>Tailscale Exit Node</title></head>
<body>
<h1>Tailscale Exit Node</h1>
<p>Status: <strong>Running</strong></p>
<p>Enhanced for claw.cloud deployment</p>
<p>IPv6: <strong>Disabled</strong></p>
<p>Bandwidth: <strong>Monitored</strong></p>
<ul>
<li><a href="/health">Health Check</a></li>
<li><a href="/status">Status</a></li>
</ul>
</body>
</html>';
        }

        # Deny access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ \.(conf|log)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }

    # HTTPS server (if SSL certificates are provided)
    server {
        listen 443 ssl http2 default_server;
        server_name _;

        # SSL configuration
        ssl_certificate /etc/ssl/certs/cert.pem;
        ssl_certificate_key /etc/ssl/private/key.pem;

        # Modern SSL configuration
        ssl_protocols TLSv1.3 TLSv1.2;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 10m;

        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Same locations as HTTP server
        include /etc/nginx/conf.d/common-locations.conf;
    }

    # Redirect HTTP to HTTPS if SSL is available
    # This will be commented out by default to avoid issues without SSL certs
    # map $scheme $https_redirect {
    #     http https;
    # }
}